apiVersion: v1
kind: Service
metadata:
  name: inventory
spec:
  selector:
      app: inventory-app
      tier: backend      
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
  type: NodePort
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: inventory-deployment
spec:
  selector:
    matchLabels:
      app: inventory-app
      tier: backend
  replicas: 1 # tells deployment to run 4 pods matching the template
  template:
    metadata:
      labels:
        app: inventory-app
        tier: backend
    spec:
      containers:
      - name: inventory
        image: gcr.io/sanguine-torus-228819/inventory
        envFrom:
        - configMapRef:
            name: wms-config
        env:
        - name: POSTGRES_HOST
          value: "$(INVENTORY_DB_SERVICE_HOST):$(INVENTORY_DB_SERVICE_PORT)"
        - name: POSTGRES_DB
          value: "$(INVENTORY_DB_DB)"
        - name: POSTGRES_USER
          value: "$(INVENTORY_DB_USER)"
        - name: POSTGRES_PWD
          value: "$(INVENTORY_DB_PWD)"
        - name: KAFKA_HOST
          value: "$(KAFKA_CLUSTER_SERVICE_HOST):$(KAFKA_CLUSTER_SERVICE_PORT_KAFKA1PORT)"
        - name: SERVER_PORT
          value: "80"                  
        - name: CONFIG_SERVICE
          value: "http://$(CONFIG_SERVICE_HOST):$(CONFIG_SERVICE_PORT)"
        livenessProbe:
          httpGet:
            path: /inventory/api/health
            port: 80
          initialDelaySeconds: 600
          timeoutSeconds: 2
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /inventory/api/ready
            port: 80
          initialDelaySeconds: 120
          timeoutSeconds: 2
          periodSeconds: 30
        ports:
        - containerPort: 80
      - name: logstash
        image: docker.elastic.co/logstash/logstash:6.3.2
        ports:
        - containerPort: 5000
